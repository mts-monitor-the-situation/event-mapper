name: Create Latest Release

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '**.py'
      - 'Makefile'
      - 'requirements.txt'
      - '.github/workflows/create-latest-release.yml'
      - 'charts/Chart.yaml'
      - 'charts/values.yaml'
      - 'charts/templates/**'
      - 'Dockerfile'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # test:
  #   name: Unit Tests
  #   uses: mts-monitor-the-situation/event-mapper/.github/workflows/run-test.yml@main

  build:
    # needs: test
    name: Build Latest Release
    runs-on: ubuntu-latest
    env:
      # HELM_PATH: ${{ github.workspace }}/event-mapper-v0.0.0-latest.tgz
      VERSION: v0.0.0
    steps:
      - name: Check Disk Space
        run: df . -h
        shell: bash

      - name: Free Disk Space Hack
        run: |
          sudo rm -rf /usr/share/dotnet \
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" \
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/lib/jvm || true
          echo "some directories deleted"
          sudo apt install aptitude -y >/dev/null 2>&1
          sudo aptitude purge aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org azure-cli microsoft-edge-stable \
            -y -f >/dev/null 2>&1
          sudo aptitude purge google-cloud-sdk -f -y >/dev/null 2>&1
          sudo aptitude purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo apt purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo aptitude purge '~n ^mysql' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^php' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^dotnet' -f -y >/dev/null 2>&1
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get autoclean -y >/dev/null 2>&1
          echo "some packages purged"
        shell: bash

      - name: Check disk space
        run: |
          df . -h
        shell: bash
      
      - name: Checkout
        uses: actions/checkout@v5

      # - name: Get Build Info
      #   id: build-info
      #   run: |
      #     echo "revision=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      #     echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      # - name: Update Helm Chart's README
      #   run: make hreadme
      #   shell: bash

      # - name: Get GitHub App Token
      #   uses: actions/create-github-app-token@v2
      #   id: app-token
      #   with:
      #     owner: ${{ github.repository_owner }}
      #     repositories: ${{ github.event.repository.name }}
      #     app-id: ${{ vars.TOKEN_APP_ID }}
      #     private-key: ${{ secrets.TOKEN_APP_PRIVATE_KEY }}

      # - name: Update Helm Chart README
      #   uses: mts-monitor-the-situation/github-actions/commit@main
      #   with:
      #     path: charts/README.md
      #     message: "Update Helm Chart's README"
      #   env:
      #     GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # - name: Setup Helm
      #   uses: azure/setup-helm@v4.3.0

      # - name: Package Helm Chart
      #   run: helm package ./charts
      #   shell: bash

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Registry Login
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: true

      # - name: Publish Helm OCI Chart
      #   run: helm push $HELM_PATH oci://ghcr.io/${{ github.repository }}
      #   shell: bash
      #   env:
      #     HELM_EXPERIMENTAL_OCI: 1

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        with:
          images: |
            ghcr.io/${{ github.repository }}

      - name: Build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          # build-args: |
          #   VERSION=${{ env.VERSION }}
          #   REVISION=${{ steps.build-info.outputs.revision }}
          #   BUILD_DATE=${{ steps.build-info.outputs.build_date }}
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ github.repository }}:latest
          push: true
          sbom: true
          provenance: mode=min
          cache-from: type=gha
          cache-to: type=gha,mode=max
          annotations: ${{ steps.meta.outputs.annotations }}

      - name: Attest
        uses: actions/attest-build-provenance@v2.4.0
        id: attest
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Update "Latest" Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          # Check if "latest" release exists
          gh release view latest 2>&1 && RELEASE_EXISTS=true || RELEASE_EXISTS=false

          if [ "$RELEASE_EXISTS" = "true" ]; then
            # If "latest" release exists, upload new assets to it using --clobber to overwrite existing ones
            gh release delete latest --cleanup-tag -y && \
            gh release create latest \
              $HELM_PATH \
              -t "Latest Release" \
              -n "Auto-generated release for the latest successful build." \
              --target $BRANCH_NAME \
              --latest=false \
              --generate-notes
          else
            # If "latest" release doesn't exist, create it and upload assets
            gh release create latest \
              $HELM_PATH \
              -t "Latest Release" \
              -n "Auto-generated release for the latest successful build." \
              --target $BRANCH_NAME \
              --generate-notes
          fi
